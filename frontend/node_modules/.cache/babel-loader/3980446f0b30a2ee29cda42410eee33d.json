{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport api from \"../../../services/api\";\nimport history from \"../../../services/history\";\nimport { logInSuccess, authFailure } from './actions';\nexport function* logIn({\n  payload\n}) {\n  try {\n    const email = payload.email,\n          password = payload.password;\n    const response = yield call(api.post, 'sessions', {\n      email,\n      password\n    });\n    const _response$data = response.data,\n          token = _response$data.token,\n          user = _response$data.user;\n    api.defaults.headers.Authorization = \"Bearer \".concat(token);\n    yield put(logInSuccess(token, user));\n    history.push('/dashboard');\n  } catch (err) {\n    toast.error('Authentication failed. Check your credentials.');\n    yield put(authFailure());\n  }\n}\nexport function* signUp({\n  payload\n}) {\n  try {\n    const name = payload.name,\n          email = payload.email,\n          password = payload.password;\n    const response = yield call(api.post, 'users', {\n      name,\n      email,\n      password\n    });\n    const _response$data2 = response.data,\n          token = _response$data2.token,\n          user = _response$data2.user; // api.defaults.headers.Authorization = `Bearer ${token}`;\n    // yield put(logInSuccess(token, user));\n\n    history.push('/');\n  } catch (err) {\n    toast.error('Account creation failed, try again.');\n    yield put(authFailure());\n  }\n}\nexport function setToken({\n  payload\n}) {\n  if (!payload) return;\n  const token = payload.auth.token;\n\n  if (token) {\n    api.defaults.headers.Authorization = \"Bearer \".concat(token);\n  }\n}\nexport function signOut() {\n  history.push('/');\n}\nexport default all([takeLatest('persist/REHYDRATE', setToken), takeLatest('@auth/LOG_IN_REQUEST', logIn), takeLatest('@auth/SIGN_UP_REQUEST', signUp), takeLatest('@auth/SIGN_OUT', signOut)]);","map":{"version":3,"sources":["/Users/jonathanferreira/Downloads/gostack-fullstack-meetapp-master/frontend/src/store/modules/auth/sagas.js"],"names":["takeLatest","call","put","all","toast","api","history","logInSuccess","authFailure","logIn","payload","email","password","response","post","data","token","user","defaults","headers","Authorization","push","err","error","signUp","name","setToken","auth","signOut"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,WAA1C;AAEA,OAAO,UAAUC,KAAV,CAAgB;AAAEC,EAAAA;AAAF,CAAhB,EAA6B;AAClC,MAAI;AAAA,UACMC,KADN,GAC0BD,OAD1B,CACMC,KADN;AAAA,UACaC,QADb,GAC0BF,OAD1B,CACaE,QADb;AAGF,UAAMC,QAAQ,GAAG,MAAMZ,IAAI,CAACI,GAAG,CAACS,IAAL,EAAW,UAAX,EAAuB;AAChDH,MAAAA,KADgD;AAEhDC,MAAAA;AAFgD,KAAvB,CAA3B;AAHE,2BAQsBC,QAAQ,CAACE,IAR/B;AAAA,UAQMC,KARN,kBAQMA,KARN;AAAA,UAQaC,IARb,kBAQaA,IARb;AAUFZ,IAAAA,GAAG,CAACa,QAAJ,CAAaC,OAAb,CAAqBC,aAArB,oBAA+CJ,KAA/C;AAEA,UAAMd,GAAG,CAACK,YAAY,CAACS,KAAD,EAAQC,IAAR,CAAb,CAAT;AAEAX,IAAAA,OAAO,CAACe,IAAR,CAAa,YAAb;AACD,GAfD,CAeE,OAAOC,GAAP,EAAY;AACZlB,IAAAA,KAAK,CAACmB,KAAN,CAAY,gDAAZ;AACA,UAAMrB,GAAG,CAACM,WAAW,EAAZ,CAAT;AACD;AACF;AAED,OAAO,UAAUgB,MAAV,CAAiB;AAAEd,EAAAA;AAAF,CAAjB,EAA8B;AACnC,MAAI;AAAA,UACMe,IADN,GACgCf,OADhC,CACMe,IADN;AAAA,UACYd,KADZ,GACgCD,OADhC,CACYC,KADZ;AAAA,UACmBC,QADnB,GACgCF,OADhC,CACmBE,QADnB;AAGF,UAAMC,QAAQ,GAAG,MAAMZ,IAAI,CAACI,GAAG,CAACS,IAAL,EAAW,OAAX,EAAoB;AAC7CW,MAAAA,IAD6C;AAE7Cd,MAAAA,KAF6C;AAG7CC,MAAAA;AAH6C,KAApB,CAA3B;AAHE,4BASsBC,QAAQ,CAACE,IAT/B;AAAA,UASMC,KATN,mBASMA,KATN;AAAA,UASaC,IATb,mBASaA,IATb,EAWF;AAEA;;AAEAX,IAAAA,OAAO,CAACe,IAAR,CAAa,GAAb;AACD,GAhBD,CAgBE,OAAOC,GAAP,EAAY;AACZlB,IAAAA,KAAK,CAACmB,KAAN,CAAY,qCAAZ;AAEA,UAAMrB,GAAG,CAACM,WAAW,EAAZ,CAAT;AACD;AACF;AAED,OAAO,SAASkB,QAAT,CAAkB;AAAEhB,EAAAA;AAAF,CAAlB,EAA+B;AACpC,MAAI,CAACA,OAAL,EAAc;AADsB,QAG5BM,KAH4B,GAGlBN,OAAO,CAACiB,IAHU,CAG5BX,KAH4B;;AAKpC,MAAIA,KAAJ,EAAW;AACTX,IAAAA,GAAG,CAACa,QAAJ,CAAaC,OAAb,CAAqBC,aAArB,oBAA+CJ,KAA/C;AACD;AACF;AAED,OAAO,SAASY,OAAT,GAAmB;AACxBtB,EAAAA,OAAO,CAACe,IAAR,CAAa,GAAb;AACD;AAED,eAAelB,GAAG,CAAC,CACjBH,UAAU,CAAC,mBAAD,EAAsB0B,QAAtB,CADO,EAEjB1B,UAAU,CAAC,sBAAD,EAAyBS,KAAzB,CAFO,EAGjBT,UAAU,CAAC,uBAAD,EAA0BwB,MAA1B,CAHO,EAIjBxB,UAAU,CAAC,gBAAD,EAAmB4B,OAAnB,CAJO,CAAD,CAAlB","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\n\nimport api from '~/services/api';\nimport history from '~/services/history';\n\nimport { logInSuccess, authFailure } from './actions';\n\nexport function* logIn({ payload }) {\n  try {\n    const { email, password } = payload;\n\n    const response = yield call(api.post, 'sessions', {\n      email,\n      password,\n    });\n\n    const { token, user } = response.data;\n\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n\n    yield put(logInSuccess(token, user));\n\n    history.push('/dashboard');\n  } catch (err) {\n    toast.error('Authentication failed. Check your credentials.');\n    yield put(authFailure());\n  }\n}\n\nexport function* signUp({ payload }) {\n  try {\n    const { name, email, password } = payload;\n\n    const response = yield call(api.post, 'users', {\n      name,\n      email,\n      password,\n    });\n\n    const { token, user } = response.data;\n\n    // api.defaults.headers.Authorization = `Bearer ${token}`;\n\n    // yield put(logInSuccess(token, user));\n\n    history.push('/');\n  } catch (err) {\n    toast.error('Account creation failed, try again.');\n\n    yield put(authFailure());\n  }\n}\n\nexport function setToken({ payload }) {\n  if (!payload) return;\n\n  const { token } = payload.auth;\n\n  if (token) {\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n  }\n}\n\nexport function signOut() {\n  history.push('/');\n}\n\nexport default all([\n  takeLatest('persist/REHYDRATE', setToken),\n  takeLatest('@auth/LOG_IN_REQUEST', logIn),\n  takeLatest('@auth/SIGN_UP_REQUEST', signUp),\n  takeLatest('@auth/SIGN_OUT', signOut),\n]);\n"]},"metadata":{},"sourceType":"module"}